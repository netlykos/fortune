plugins {
  id 'eclipse'
  id 'io.spring.dependency-management'
  id 'idea'
  id 'jacoco'
  id 'org.sonarqube'
  id 'org.netlykos.fortune.base-conventions'
  id 'java-library'
 }

group = 'org.netlykos.fortune'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
  }
}

dependencies {
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

  implementation "org.apache.logging.log4j:log4j-api"

  testImplementation ("org.springframework.boot:spring-boot-starter-test") {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
  }
  testImplementation "org.springframework.boot:spring-boot-starter-log4j2"
  testImplementation "org.junit.jupiter:junit-jupiter"

  if (project.name != 'test-support') {
    testImplementation(project(':app:test-support'))
  }
}

java {
  withSourcesJar()
  toolchain {
    sourceCompatibility = JavaLanguageVersion.of(17)
    targetCompatibility = JavaLanguageVersion.of(17)
  }
}

test {
  useJUnitPlatform()
  // ignore failures until we can get the build working in the environment
  // ignoreFailures = false

  // Add 'standardOut' to the event list if you want to see it in the build
  testLogging.events = ['skipped', 'failed']
  testLogging.exceptionFormat = 'full'

  // report is always generated after tests run
  finalizedBy jacocoTestReport
}

jacocoTestReport {
   // tests are required to run before generating the report
  dependsOn test
  reports {
    xml.enabled true
    csv.enabled false
  }
}

sonarqube {
  properties {
    property "sonar.projectKey", "${sonarProjectKey}"
    property "sonar.organization", "${sonarOrganization}"
    property "sonar.projectVersion", version
    property "sonar.host.url", "${sonarHostUrl}"
  }
}

