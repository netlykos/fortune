plugins {
  id "io.spring.dependency-management"
  id "jacoco"
  id "java"
  id "org.sonarqube"
  id "org.netlykos.fortune.base-conventions"
 }

group = 'org.netlykos.fortune'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
  // configuration to share the test report data to be aggregated for the whole project
  binaryTestResultsElements {
    canBeResolved = false
    canBeConsumed = true
    attributes {
      attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
      attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'test-report-data'))
    }
    outgoing.artifact(test.binaryResultsDirectory)
  }
}

repositories {
  mavenCentral()
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
  }
}

dependencies {
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

  implementation "org.apache.logging.log4j:log4j-api"

  testImplementation ("org.springframework.boot:spring-boot-starter-test") {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
  }
  testImplementation "org.springframework.boot:spring-boot-starter-log4j2"
  testImplementation "org.junit.jupiter:junit-jupiter"

  if (project.name != "test-support") {
    testImplementation(project(":app:test-support"))
  }
}

java {
  withSourcesJar()
  toolchain {
    sourceCompatibility = JavaLanguageVersion.of(17)
    targetCompatibility = JavaLanguageVersion.of(17)
  }
}

test {
  useJUnitPlatform()
  // ignores failures until we can get the build working in the environment
  // ignoreFailures = false

  testLogging.events = ["passed", "skipped", "failed"]
  testLogging.exceptionFormat = "full"
  // Uncomment the below to see the system out and err in the build
  testLogging.showStandardStreams = true

  // report is always generated after tests run
  finalizedBy jacocoTestReport

  // don't create individual project html reports
  reports.html.required = false
}

jacocoTestReport {
   // tests are required to run before generating the report
  dependsOn test
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
  }
}

sonarqube {
  properties {
    property "sonar.projectKey", "${sonarProjectKey}"
    property "sonar.organization", "${sonarOrganization}"
    property "sonar.projectVersion", version
    property "sonar.host.url", "${sonarHostUrl}"
  }
}

